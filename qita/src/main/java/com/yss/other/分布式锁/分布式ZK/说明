1.zk的常见使用场景:
   服务注册与订阅(公用节点)
   分布式通知(监听znode)
   服务命令(znode特性)
   数据订阅,发布(watcher)
   分布式锁(临时节点)
2. zk是啥? 数据库,文件存储系统,并有监听通知机制(观察者模式)
3.存文件,存什么? 节点  -持久节点   临时节点   顺序节点  持久顺序
4.zk 怎么去保证分布式情况下线程安全? 并发竞争怎么控制的?
    单机版: 使用sync lock 保证线程安全
    分布式:  zk的节点就能保证这个问题,这个节点具有是唯一特性,如果创建过,在创建就会报错

    过程:
       1. 所有线程全部去创建, 创建成功就返回true, 然后它就可以去扣减库存,后面的去创建 就会报错,
    可以把扣减失败的,放到队列中
       2. 如何释放锁, 删除节点,必须在finally中释放锁(不释放会出现死锁现象)再通知其他过来拿锁
       3. 怎么判断节点删除了: 监听节点删除事件,这一块节点需要是临时节点(如果是持久节点的话,如果宕机了,那就删除不了,出现死锁)
       4. 羊群效应(一个释放的消息,然后被900多个服务监听到,去抢,会宕机 会占用资源,网络IO)
           解决: 临时顺序节点-每个节点只监听自己的前一个节点,释放的话也是一个个释放,不会出现羊群效应

5.zk分布式的缺点?
    性能没有缓存服务高(每次创建锁,释放锁,都要动态创建,销毁节点来实现锁功能)
    会产生并发问题: 如果主机宕机(临时节点被删除),其他用户就会获取到分布式锁,会出现并发,
          但是不常见,zk有重试机制, zk集群检测不到客户端的心跳,就会重试 Curator客户端支持多种重试策略。















