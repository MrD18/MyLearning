1. 策略模式:
在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。

2. 介绍:
     -目的: 定义一系列算法,把他们一个个封装起来,并且使它们可以互相替换
     -解决: 在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。
     -何时使用: 一个系统有许多许多类，而区分它们的只是他们直接的行为。
     -如何解决: 将这些算法封装成一个一个的类，任意地替换。
     -关键代码: 实现同一个接口。
     - 应用实例: 旅行出游方式,选择骑自行车,坐汽车,每一种方式都是一个策略
     -优点:  1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。
     -缺点:   1、策略类会增多。 2、所有策略类都需要对外暴露。
     -使用场景: 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。
               2、一个系统需要动态地在几种算法中选择一种。
               3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。

步骤:  1.一个策略接口: 主要放判断的参数
      2. 根据if-else中方法需要的对象,创建其策略实现类(可能多个)
      3. 方法一: 创建上下文类Context , 其中就有执行策略的方法
         方法二: *枚举中添加当时if-else中的对象名称,还得在枚举中定义传进来的参数的名字: 枚举.values
                *此时需要spring上下文对象的工具类:目的是获取bean
                *工厂类,获取对应的策略实现类
                https://blog.csdn.net/yehongzhi1994/article/details/105333455

