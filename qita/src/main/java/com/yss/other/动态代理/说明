1. 代理的特点:   客户---> 经纪人--->明星
        客户不用和明星直接谈, 和经纪人谈论即可
    1）执行者，被代理人
    2）对于代理人来说，这件事情一定要做或者没时间做，找代理
    3）需要获取被代理的人的个人资料

    生活中的例子：1火车票黄牛，2，租房中介

2. JDK和CGLIB动态代理原理:
   JDK:利用拦截器(拦截器必须实现InvocationHanlder)加上反射机制生成一个实现代理接口的匿名类，
       在调用具体方法前调用InvokeHandler来处理。
   CGLib:利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。

3. 何时使用JDK还是CGLiB？
  1）如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。

  2）如果目标对象实现了接口，可以强制使用CGLIB实现AOP。

  3）如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换。

就是说: 目标对象实现了接口 默认可以选JDK动态实现AOP, 可可以强制实现CGLib 实现AOP
       目标对象没有实现接口, 必须采用CGLib

4、如何强制使用CGLIB实现AOP？
         pom 添加依赖

5.JDK动态代理和CGLIB字节码生成的区别?
   1）JDK动态代理只能对实现了接口的类生成代理，而不能针对类。

   2）CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，
   并覆盖其中方法实现增强，但是因为采用的是继承，所以该类或方法最好不要声明成final，
   对于final类或方法，是无法继承的

6、CGlib比JDK快？  随着JDK的升级, JDK代理会越来越快
   1）使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。

   2）在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐

7、Spring如何选择用JDK还是CGLiB？
   1）当Bean实现接口时，Spring就会用JDK的动态代理。
   2）当Bean没有实现接口时，Spring使用CGlib是实现。
   3）可以强制使用CGlib（在spring配置中加入<aop:aspectj-autoproxy proxy-target-class="true"/>）。

底层
https://www.cnblogs.com/hetutu-5238/p/11988946.html