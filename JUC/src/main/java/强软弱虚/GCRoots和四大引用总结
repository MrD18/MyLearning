GC Roots核心思想: 以GCRoots的对象作为起始点,从这些节点开始向下搜索,搜索走过的路径称为
   "引用链" ,当一个对象到GCRoots没有任何的引用链相连的时候,及到这个对象不可达,证明这对象不可达,
    可进行回收.

    可最为GC Roots的对象:
       1. 虚拟机栈
       2. 方法区的类属性所引用的对象
       3. 方法区中常量所引用的对象
       4. 本地方法栈中引用的对象

    那个根据这个我们应用这4个引用怎么确定
    强:  被引用这 死都不回收的 OOM了都不回收,也是造成OOM的原因之一
    软:  内存够时不回收,不狗时进行回收    Java.lang.ref.SoftReference类
    弱:  内存够不够都会进行回收, 一样的存在引用队列中,可以在死之前做一些有意义的事情   `java.lang.ref.WeakReference` 类
    虚:  不会用虚引用表明对象,会在干掉它时将其存在引用队列中,可以通过引用队列进行一些通知机制  java.lang.ref.PhantomReference

    软和弱 使用场景:
         每次读取图片都从硬盘读会影响性能,  一次性全部加载到内存中,会造成内存溢出
      思路: HashMap 保存图片的路径和相应对象关联的软引用之间的映射关系, 内存不够时自动回收这部门内存.避免OOM